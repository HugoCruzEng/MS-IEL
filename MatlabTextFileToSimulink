bdclose('all');
sfnew;
rt = sfroot;
m = rt.find('-isa','Stateflow.Machine');
chart = m.find('-isa','Stateflow.Chart');
chart.set('Name','DESdiag');	% Set name of the Stateflow block

DE=importdata('de.txt');
EVENTOTRANSICAO=importdata('eventoTransicao.txt');
PARA=importdata('para.txt');
ESTADOS=importdata('estados.txt');
EVENTOS=importdata('eventos.txt');
INICIAL=importdata('inicial.txt');

%NameState=clearString(ESTADOS);
%Criacao dos estados
lin=1;
for i=1:length(ESTADOS)
State(i)= Stateflow.State(chart);
State(i).Name = string(ESTADOS(i));
State(i).Position = [(50+500*lin) (50+500*fix(i/10)) 400 400 ];
State(i).HasOutputData = true;
lin=lin+1;
if lin==11 
lin=1;
end
end
%Criacao das transicoes
for i=1:length(DE)
t(i) = Stateflow.Transition(chart);
t(i).Source = State(string(ESTADOS)==string(DE(i)));
t(i).Destination = State(string(ESTADOS)==string(PARA(i)));
t(i).SourceOClock = 3;
t(i).DestinationOClock = 9;
t(i).LabelString = string(EVENTOTRANSICAO(i));
end
%Criacao dos eventos
for i=1:length(EVENTOS)
e(i) = Stateflow.Event(chart);
e(i).Name = string(EVENTOS(i));
e(i).Scope = 'Input';
e(i).Port = i;
e(i).Trigger='Rising';
end

%estado inicial
I = Stateflow.Transition(chart);
I.Destination = State(string(ESTADOS)==INICIAL);
I.DestinationOClock = 0;
xsource = State(string(ESTADOS)==INICIAL).Position(1)+ State(string(ESTADOS)==INICIAL).Position(3)/2-10;
ysource = State(string(ESTADOS)==INICIAL).Position(2)-20;
I.SourceEndPoint = [xsource ysource];
sfsave('untitled','DESmodel');

% simulink;	% Open Simulink Library
add_block('simulink/Sinks/To Workspace','DESmodel/output');
set_param('DESmodel/output','Position',[170 30 240 55]);	% Set Position
% % Add Routing dos estados de falha
contEstadosFalha=0;
for i=1:length(ESTADOS)
if strfind(string(ESTADOS(i)),'falha')~=0
contEstadosFalha=contEstadosFalha+1;
end
end
add_block('simulink/Signal Routing/Mux','DESmodel/estadosFalha');
set_param('DESmodel/estadosFalha','Position',[260, 26, 280, 50]);	% Set Position
set_param('DESmodel/estadosFalha','Inputs',string(contEstadosFalha));	% Number of input ports

add_block('simulink/Quick Insert/Logic and Bit Operations/OR','DESmodel/sinalFalha');
set_param('DESmodel/sinalFalha','Position',[260, 26, 280, 50]);	% Set Position
set_param('DESmodel/sinalFalha','Inputs',string(contEstadosFalha));	% Number of input ports

add_block('simulink/Signal Routing/Mux','DESmodel/route');
set_param('DESmodel/route','Position',[140, 26, 145, 65]);	%Set Position
set_param('DESmodel/route','Inputs',string(length(ESTADOS)));	% Number of input ports

add_block('simulink/Signal Routing/Mux','DESmodel/in');
set_param('DESmodel/in','Position',[10 200 15 280]);	%Set Position
set_param('DESmodel/in','Inputs',string(length(EVENTOS)));	% Number of input ports
% % % Add lines between blocks
contEstadosFalha=1;
for i=1:length(ESTADOS)
add_line('DESmodel',strcat('DESdiag/',string(i)),strcat('route/',string(i)));
%saida com os estados de falha "falha"
if strfind(string(ESTADOS(i)),'falha')~=0
add_line('DESmodel',strcat('DESdiag/',string(i)),strcat('estadosFalha/',string(contEstadosFalha)));
add_line('DESmodel',strcat('DESdiag/',string(i)),strcat('sinalFalha/',string(contEstadosFalha)));
contEstadosFalha=contEstadosFalha+1;
end  
end
add_line('DESmodel','route/1','output/1');
%add_line('DESmodel','in/1','DESdiag/1');
sfsave('DESmodel','DESmodel');
